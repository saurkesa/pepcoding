package Graph;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Arrays;

/*
 * 
 * 1. You are given a graph.
2. You are required to find and print if the graph is bipartite

Note -> A graph is called bipartite if it is possible to split it's vertices in two sets
 of mutually exclusive and exhaustive vertices such that all edges are across sets.
               
     every non cyclic graph is bipartite

===============input

7
8
0 1 10
1 2 10
2 3 10
0 3 10
3 4 10
4 5 10
5 6 10
4 6 10

========================output
false

 */
public class IsGraphBipartite {

	static class Edge {
		int src;
		int nbr;
		int wt;

		Edge(int src, int nbr, int wt) {
			this.src = src;
			this.nbr = nbr;
			this.wt = wt;
		}
	}

	public static class Pair {
		int v;
		String psf;
		int level;

		Pair(int v, String psf, int level) {
			this.v = v;
			this.psf = psf;
			this.level = level;
		}
	}

	private static boolean checkComponentForBipartiteness(ArrayList<Edge>[] graph, int src, int[] visited) {

		ArrayDeque<Pair> q = new ArrayDeque<>();
		q.add(new Pair(src, src + "", 0));
		while (q.size() > 0) {
			Pair remove = q.removeFirst();
			if (visited[remove.v] != 1) {
				if (remove.level != visited[remove.level]) {
					return false;
				}

			} else {
				visited[remove.v] = remove.level;
			}
			for (Edge e : graph[remove.v]) {
				if (visited[e.nbr] == -1) {
					q.add(new Pair(e.nbr, remove.psf + e.nbr, remove.level + 1));
				}
			}
		}

		return true;
	}

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		int vtces = Integer.parseInt(br.readLine());
		ArrayList<Edge>[] graph = new ArrayList[vtces];
		for (int i = 0; i < vtces; i++) {
			graph[i] = new ArrayList<>();
		}

		int edges = Integer.parseInt(br.readLine());
		for (int i = 0; i < edges; i++) {
			String[] parts = br.readLine().split(" ");
			int v1 = Integer.parseInt(parts[0]);
			int v2 = Integer.parseInt(parts[1]);
			int wt = Integer.parseInt(parts[2]);
			graph[v1].add(new Edge(v1, v2, wt));
			graph[v2].add(new Edge(v2, v1, wt));
		}

		int[] visited = new int[vtces];
		Arrays.fill(visited, -1);
		for (int v = 0; v < vtces; v++) {
			if (visited[v] == -1) {
				boolean isCompBipartite = checkComponentForBipartiteness(graph, v, visited);
				if (isCompBipartite == false) {
					System.out.println("false");
					return;
				}
			}
		}

		System.out.println(true);
	}

}
