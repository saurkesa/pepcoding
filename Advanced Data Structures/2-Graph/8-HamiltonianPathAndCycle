package Graph;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashSet;

/*
 * 1. You are given a graph and a src vertex.
2. You are required to find and print all hamiltonian paths and cycles starting from src. The cycles must end with "*" and paths with a "."

Note -> A hamiltonian path is such which visits all vertices without visiting any twice. A hamiltonian path becomes a cycle if there is an edge between first and last vertex.
Note -> Print in lexicographically increasing order.
 * 
 * =========input
 * 
 * 7
9
0 1 10
1 2 10
2 3 10
0 3 10
3 4 10
4 5 10
5 6 10
4 6 10
2 5 10
src 0
=========output
0123456.
0123465.
0125643*
0346521*
 */
public class HamiltonianPathAndCycle {

	public static class Edge {
		int v;
		int n;

		Edge(int v, int n) {
			this.v = v;
			this.n = n;
		}

	}

	private static void hamiltonian(ArrayList<Edge>[] graph, int src, HashSet<Integer> visited, String psf, int osrc) {

		if (visited.size() == graph.length - 1) {
			System.out.print(psf);
			boolean closingEndFound = false;
			for (Edge e : graph[src]) {
				if (e.n == osrc) {
					closingEndFound = true;
					break;
				}
			}
			if (closingEndFound == true) {
				System.out.println("*");
			} else {
				System.out.println(".");
			}
			return;
		}
		visited.add(src);
		for (Edge e : graph[src]) {
			if (visited.contains(e.n) == false) {
				hamiltonian(graph, e.n, visited, psf + e.n, osrc);
			}
		}
		visited.remove(src);
	}

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		int n = Integer.parseInt(br.readLine()); // number of vertices
		int k = Integer.parseInt(br.readLine()); // number of edges

		ArrayList<Edge>[] graph = new ArrayList[n];

		for (int v = 0; v < n; v++) {
			graph[v] = new ArrayList<Edge>();
		}

		for (int e = 0; e < k; e++) {
			String line = br.readLine();
			String[] parts = line.split(" ");
			int v1 = Integer.parseInt(parts[0]);
			int v2 = Integer.parseInt(parts[1]);
			graph[v1].add(new Edge(v1, v2));
			graph[v2].add(new Edge(v2, v1));
		}

		int src = Integer.parseInt(br.readLine());
		HashSet<Integer> visited = new HashSet<Integer>();
		hamiltonian(graph, src, visited, src + "", src);

	}

}
