import java.util.ArrayList;
import java.util.Scanner;
/*
 * 1. You are given a number n and a number m representing number of rows and columns in a maze.
2. You are standing in the top-left corner and have to reach the bottom-right corner. Only two moves are allowed 'h' (1-step horizontal) and 'v' (1-step vertical).
3. Complete the body of getMazePath function - without changing signature - to get the list of all paths that can be used to move from top-left to bottom-right.
Use sample input and output to take idea about output.

 * input 3,3
 * output
 * [hhvv, hvhv, hvvh, vhhv, vhvh, vvhh]
 */
public class GetMazePath {

	private static ArrayList<String> getMazePath(int sr, int sc, int dr, int dc) {

		if (sr == dr && sc == dc) {
			ArrayList<String> bres = new ArrayList<String>();
			bres.add("");
			return bres;
		}
		ArrayList<String> hpaths = new ArrayList<String>();
		ArrayList<String> vpaths = new ArrayList<String>();

		if (sr < dr) {
			vpaths = getMazePath(sr + 1, sc, dr, dc);
		}
		if (sc < dc) {
			hpaths = getMazePath(sr, sc + 1, dr, dc);
		}
		ArrayList<String> paths = new ArrayList<String>();
		for (String hpath : hpaths) {
			paths.add("h" + hpath);
		}
		for (String vpath : vpaths) {
			paths.add("v" + vpath);
		}
		return paths;
	}

	public static void main(String[] args) {
		Scanner s1 = new Scanner(System.in);
		int n = s1.nextInt();
		int m = s1.nextInt();
		ArrayList<String> mazePath = getMazePath(1, 1, n, m);
		System.out.println(mazePath);

	}

}
