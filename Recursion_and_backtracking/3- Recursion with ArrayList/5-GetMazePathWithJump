import java.util.ArrayList;
import java.util.Scanner;
/*
 * 1. You are given a number n and a number m representing number of rows and columns in a maze.
2. You are standing in the top-left corner and have to reach the bottom-right corner. 
3. In a single move you are allowed to jump 1 or more steps horizontally (as h1, h2, .. ), or 1 or more steps vertically (as v1, v2, ..) or 1 or more steps diagonally (as d1, d2, ..). 
4. Complete the body of getMazePath function - without changing signature - to get the list of all paths that can be used to move from top-left to bottom-right.
Use sample input and output to take idea about output.
 */
/*
 * input 3,3 
 * output
 * 3
3
[h1h1v1v1, h1h1v2, h1v1h1v1, h1v1v1h1, h1v1d1, h1v2h1, h1d1v1, h2v1v1, h2v2, v1h1h1v1, v1h1v1h1, v1h1d1, 
v1h2v1, v1v1h1h1, v1v1h2, v1d1h1, v2h1h1, v2h2, d1h1v1, d1v1h1, d1d1, d2]
 */

public class GetMazePathWithJump {
	private static ArrayList<String> getMazePathWithJump(int sr, int sc, int dr, int dc) {

		if (sr == dr && sc == dc) {
			ArrayList<String> bres = new ArrayList<String>();
			bres.add("");
			return bres;
		}
		ArrayList<String> paths = new ArrayList<String>();
		for (int ms = 1; ms <= dc - sc; ms++) {
			ArrayList<String> hpaths = getMazePathWithJump(sr, sc + ms, dr, dc);
			for (String hpath : hpaths) {
				paths.add("h" + ms + hpath);
			}

		}
		for (int ms = 1; ms <= dr - sr; ms++) {
			ArrayList<String> vpaths = getMazePathWithJump(sr + ms, sc, dr, dc);
			for (String vpath : vpaths) {
				paths.add("v" + ms + vpath);
			}
		}
		for (int ms = 1; ms <= dr - sr && ms <= dc - sc; ms++) {
			ArrayList<String> dpaths = getMazePathWithJump(sr + ms, sc + ms, dr, dc);
			for (String dpath : dpaths) {
				paths.add("d" + ms + dpath);
			}

		}

		return paths;

	}

	public static void main(String[] args) {

		Scanner s1 = new Scanner(System.in);
		int n = s1.nextInt();
		int m = s1.nextInt();
		ArrayList<String> mazePathWithJump = getMazePathWithJump(1, 1, n, m);
		System.out.println(mazePathWithJump);

	}

}
