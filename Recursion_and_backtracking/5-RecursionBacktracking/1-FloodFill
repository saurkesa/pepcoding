package RecursionBacktracking;

import java.util.Scanner;
/*
 * 1. You are given a number n, representing the number of rows.
2. You are given a number m, representing the number of columns.
3. You are given n*m numbers, representing elements of 2d array a. The numbers can be 1 or 0 only.
4. You are standing in the top-left corner and have to reach the bottom-right corner. 
Only four moves are allowed 't' (1-step up), 'l' (1-step left), 'd' (1-step down) 'r' (1-step right).
 You can only move to cells which have 0 value in them. You can't move out of the boundaries or in
  the cells which have value 1 in them (1 means obstacle)
5. Complete the body of floodfill function - without changing signature - to print all paths 
that can be used to move from top-left to bottom-right.

Note1 -> Please check the sample input and output for details
Note2 -> If all four moves are available make moves in the order 't', 'l', 'd' and 'r'


 * input 
 * 3 3
0 0 0
1 0 1
0 0 0
output
rddr

 */
public class FloodFill {

	private static void floodFill(int[][] maze, int row, int col, String path, boolean[][] visited) {

		if (row < 0 || col < 0 || row == maze.length || col == maze[0].length || maze[row][col] == 1 ||visited[row][col]==true) {
			return;
		}
		if (row == maze.length - 1 && col == maze[0].length - 1) {
			System.out.println(path);
			return;
		}
		visited[row][col]=true;
		floodFill(maze, row - 1, col, path + "t",visited);
		floodFill(maze, row, col - 1, path + "l",visited);
		floodFill(maze, row + 1, col, path + "d",visited);
		floodFill(maze, row, col + 1, path + "r",visited);
		visited[row][col]=false;

	}

	public static void main(String[] args) {

		Scanner s1 = new Scanner(System.in);
		int n = s1.nextInt();
		int m = s1.nextInt();
		int[][] arr = new int[n][m];
		for (int i = 0; i < arr.length; i++) {
			for (int j = 0; j < arr[0].length; j++) {
				arr[i][j] = s1.nextInt();
			}
		}
		boolean [][] visited = new boolean[n][m];
		floodFill(arr, 0, 0, "",visited);
	}

}
