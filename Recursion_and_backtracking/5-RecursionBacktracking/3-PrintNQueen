package RecursionBacktracking;

import java.util.Scanner;
/*
 * input 4
 * output
 
0-1,1-3,2-0,3-2,.
0-2,1-0,2-3,3-1,.
 */
public class PrintNQueen {

	private static void printNQueesn(int[][] chess, String path, int row) {

		if (row == chess.length) {
			System.out.println(path +".");
			return;
		}
		for (int col = 0; col < chess.length; col++) {
			if(isItSafePlaceForQueen(chess,row,col) == true)
			{
			chess[row][col] = 1;
			printNQueesn(chess, path + row + "-" + col + ",", row + 1);
			chess[row][col] = 0;
			}

		}

	}

	private static boolean isItSafePlaceForQueen(int[][] chess, int row, int col) {
		
		for(int i=row-1,j=col;i>=0;i--)
		{
			if(chess[i][j]==1)
			{
				return false;
			}
		}
		for(int i=row-1,j=col-1;i>=0 && j>=0;i--,j--)
		{
			if(chess[i][j]==1)
			{
				return false;
			}
		}
		for(int i=row-1,j=col+1;i>=0 && j<chess.length;i--,j++)
		{
			if(chess[i][j]==1)
			{
				return false;
			}
		}
		return true;
	}

	public static void main(String[] args) {

		Scanner s1 = new Scanner(System.in);
		int n = s1.nextInt();
		int[][] chess = new int[n][n];
		printNQueesn(chess, "", 0);

	}

}
