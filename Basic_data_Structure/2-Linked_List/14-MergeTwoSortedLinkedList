package LinkedList;


import java.util.Scanner;
/*
 * 
 * 1. You are given a partially written LinkedList class.
2. You are required to complete the body of mergeTwoSortedLists function. The function is static and is passed two lists which are sorted. The function is expected to return a new sorted list containing elements of both lists. Original lists must stay as they were.
3. Input and Output is managed for you.

 * 
 * -------------input
 * 
 * 3
10
20
30
3
8
9
21

==============output
8 9 10 20 21 30 
10 20 30 
8 9 21 
 */
public class MergeTwoSortedLinkedList {
	public static class Node {
		int data;
		Node next;
	}

	public static class LinkedList {
		Node head;
		Node tail;
		int size;

		void addLast(int val) {
			Node temp = new Node();
			temp.data = val;
			temp.next = null;

			if (size == 0) {
				head = tail = temp;
			} else {
				tail.next = temp;
				tail = temp;
			}

			size++;
		}

		public int size() {
			return size;
		}

		public void display() {
			Node temp = head;

			while (temp != null) {
				System.out.print(temp.data + " ");
				temp = temp.next;
			}

			System.out.println();

		}

		public static LinkedList mergeTwoSortedLists(LinkedList l1, LinkedList l2) {

			Node one = l1.head;
			Node two = l2.head;
			LinkedList res = new LinkedList();
			while (one != null && two != null) {
				if (one.data < two.data) {
					res.addLast(one.data);
					one = one.next;
				} else {
					res.addLast(two.data);
					two = two.next;
				}
			}

			while (one != null) {

				res.addLast(one.data);
				one = one.next;

			}
			while (two != null) {

				res.addLast(two.data);
				two = two.next;

			}
			return res;

		}
	}

	public static void main(String[] args) throws Exception {

		Scanner s1 = new Scanner(System.in);
		int n1 = s1.nextInt();
		int[] val1 = new int[n1];
		LinkedList l1 = new LinkedList();
		for (int i = 0; i < n1; i++) {

			l1.addLast(s1.nextInt());
		}

		int n2 = s1.nextInt();
		int[] val2 = new int[n2];
		LinkedList l2 = new LinkedList();
		for (int i = 0; i < n2; i++) {

			l2.addLast(s1.nextInt());
		}

		LinkedList merged = LinkedList.mergeTwoSortedLists(l1, l2);
		merged.display();
		l1.display();
		l2.display();
	}
}
