package LinkedList;

import java.util.Scanner;

/*
 * 
 * 1. You are given a partially written LinkedList class.
2. You are required to complete the body of IsPalindrome function. The function is expected to check if the linked list is a palindrome or not and return true or false accordingly.
3. Input and Output is managed for you.
 * 
 * input
 * 
 * 5
1
2
3
2
1
============output
true

 */
public class LinkedListPalindrome {

	public static class Node {
		int data;
		Node next;
	}

	public static class LinkedList {
		Node head;
		Node tail;
		int size;

		void addLast(int val) {
			Node temp = new Node();
			temp.data = val;
			temp.next = null;

			if (size == 0) {
				head = tail = temp;
			} else {
				tail.next = temp;
				tail = temp;
			}

			size++;
		}

		public int size() {
			return size;
		}

		public void display() {
			Node temp = head;

			while (temp != null) {
				System.out.print(temp.data + " ");
				temp = temp.next;
			}

			System.out.println();

		}

		private boolean isPalindromeHelper(Node right) {

			if (right == null) {
				return true;
			}
			boolean rres = isPalindromeHelper(right.next);
			if (rres == false) {
				return false;
			} else if (right.data != pleft.data) {
				return false;
			} else {
				pleft = pleft.next;
				return true;
			}
		}

		Node pleft;

		public boolean IsPalindrome() {
			pleft = head;
			return isPalindromeHelper(pleft);
		}

	}

	public static void main(String[] args) throws Exception {

		Scanner s1 = new Scanner(System.in);
		int n1 = s1.nextInt();
		int[] val1 = new int[n1];
		LinkedList l1 = new LinkedList();
		for (int i = 0; i < n1; i++) {

			l1.addLast(s1.nextInt());
		}
		System.out.println(l1.IsPalindrome());

	}

}
