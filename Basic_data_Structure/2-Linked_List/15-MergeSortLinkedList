package LinkedList;

import java.util.Scanner;
/*
 * 
 * 1. You are given a partially written LinkedList class.
2. You are required to complete the body of mergeSort function. The function is static and is passed the head and tail of an unsorted list. The function is expected to return a new sorted list. The original list must not change.
3. Input and Output is managed for you. 

Note - Watch the question video for theory of merge sort.


 * ================input
 * 
 * 6
10
23
12
8
5
20

output
5 8 10 12 20 23 
10 23 12 8 5 20 
 */
public class MergeSortLinkedList {

	public static class Node {
		int data;
		Node next;
	}

	public static class LinkedList {
		Node head;
		Node tail;
		int size;

		void addLast(int val) {
			Node temp = new Node();
			temp.data = val;
			temp.next = null;

			if (size == 0) {
				head = tail = temp;
			} else {
				tail.next = temp;
				tail = temp;
			}

			size++;
		}

		public int size() {
			return size;
		}

		public void display() {
			Node temp = head;

			while (temp != null) {
				System.out.print(temp.data + " ");
				temp = temp.next;
			}

			System.out.println();

		}

		public static LinkedList mergeTwoSortedLists(LinkedList l1, LinkedList l2) {

			Node one = l1.head;
			Node two = l2.head;
			LinkedList res = new LinkedList();
			while (one != null && two != null) {
				if (one.data < two.data) {
					res.addLast(one.data);
					one = one.next;
				} else {
					res.addLast(two.data);
					two = two.next;
				}
			}

			while (one != null) {

				res.addLast(one.data);
				one = one.next;

			}
			while (two != null) {

				res.addLast(two.data);
				two = two.next;

			}
			return res;

		}

		private static Node midNode(Node head, Node tail) {

			Node fast = head;
			Node slow = head;
			while (fast != tail && fast.next != tail) {
				fast = fast.next.next;
				slow = slow.next;
			}
			return slow;
		}

		public static LinkedList mergeSort(Node head, Node tail) {

			if (head == tail) {
				LinkedList br = new LinkedList();
				br.addLast(head.data);
				return br;
			}
			Node mid = midNode(head, tail);
			LinkedList fsh = mergeSort(head, mid);
			LinkedList ssh = mergeSort(mid.next, tail);
			LinkedList cl = mergeTwoSortedLists(fsh, ssh);
			return cl;
		}

	}

	public static void main(String[] args) throws Exception {

		Scanner s1 = new Scanner(System.in);
		int n1 = s1.nextInt();
		int[] val1 = new int[n1];
		LinkedList l1 = new LinkedList();
		for (int i = 0; i < n1; i++) {

			l1.addLast(s1.nextInt());
		}

		LinkedList sorted = LinkedList.mergeSort(l1.head, l1.tail);
		sorted.display();
		l1.display();
	}

}
