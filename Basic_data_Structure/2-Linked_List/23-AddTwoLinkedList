package LinkedList;

import java.util.Scanner;
/*
 * 
 * 
 * 1. You are given a partially written LinkedList class.
2. You are required to complete the body of addLinkedLists function. The function is passed two linked lists which represent two numbers - the first element is the most significant digit and the last element is the least significant digit. The function is expected to add the two linked list and return a new linked list.

The following approaches are not allowed :
    1. Don't reverse the linked lists in order to access them from least significant digit 
     to most significant.
     2. Don't use arrays or explicit extra memory.
     3. Don't convert linked lists to number, add them up and convert the result back 
     to a linked list.

Hint - You are expected to take help of recursion to access digits from least significant to most significant. You have to tackle the challenge of unequal size of lists and manage carry where required.

3. Input and Output is managed for you. 


 * input
 *l1---- 1
1
l2------3
9
9
9
10
20

output 
1 
9 9 9 
1 0 0 0 
10 1 0 0 0 20 

 */
public class AddTwoLinkedList {

	public static class Node {
		int data;
		Node next;
	}

	public static class LinkedList {
		Node head;
		Node tail;
		int size;
		Node fleft;

		void addLast(int val) {
			Node temp = new Node();
			temp.data = val;
			temp.next = null;

			if (size == 0) {
				head = tail = temp;
			} else {
				tail.next = temp;
				tail = temp;
			}

			size++;
		}

		public int size() {
			return size;
		}

		public void display() {
			Node temp = head;

			while (temp != null) {
				System.out.print(temp.data + " ");
				temp = temp.next;
			}

			System.out.println();

		}

		public void addFirst(int val) {

			Node temp = new Node();
			temp.data = val;
			temp.next = head;
			head = temp;
			if (size == 0) {
				tail = temp;
			}
			size++;

		}

		private static int addListHelper(Node one, int pv1, Node two, int pv2, LinkedList res) {
			if (one == null && two == null) {
				return 0;
			}

			int data = 0;

			if (pv1 > pv2) {
				int oc = addListHelper(one.next, pv1 - 1, two, pv2, res);
				data = one.data + oc;
			} else if (pv1 < pv2) {
				int oc = addListHelper(one, pv1, two.next, pv2 - 1, res);
				data = two.data + oc;
			} else {
				int oc = addListHelper(one.next, pv1 - 1, two.next, pv2 - 1, res);
				data = one.data + two.data + oc;

			}

			int nd = data % 10;
			int nc = data / 10;

			res.addFirst(nd);
			return nc;
		}

		public static LinkedList addTwoLists(LinkedList one, LinkedList two) {
			LinkedList res = new LinkedList();
			int oc = addListHelper(one.head, one.size, two.head, two.size, res);

			if (oc > 0) {
				res.addFirst(oc);
			}
			return res;
			// write your code here
		}

	}

	public static void main(String[] args) throws Exception {

		Scanner s1 = new Scanner(System.in);
		int n1 = s1.nextInt();
		int[] val1 = new int[n1];
		LinkedList l1 = new LinkedList();
		for (int i = 0; i < n1; i++) {

			l1.addLast(s1.nextInt());
		}

		int n2 = s1.nextInt();
		int[] val2 = new int[n1];
		LinkedList l2 = new LinkedList();
		for (int i = 0; i < n2; i++) {

			l2.addLast(s1.nextInt());
		}
		LinkedList sum = LinkedList.addTwoLists(l1, l2);

		int a = s1.nextInt();
		int b = s1.nextInt();

		l1.display();
		l2.display();
		sum.display();
		sum.addFirst(a);
		sum.addLast(b);
		sum.display();

	}

}
