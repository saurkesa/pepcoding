package LinkedList;

import java.util.Scanner;
/*
 * 
 * 
 * 1. You are given a partially written LinkedList class.
2. You are required to complete the body of kReverse function. The function is expected to tweak the list such that all groups of k elements in the list get reversed and linked. If the last set has less than k elements, leave it as it is (don't reverse).
3. Input and Output is managed for you.


 * note:  1. Time complexity -> O(n)
2. Space complexity -> constant
 * ===========input
 * 
 * 11
1
2
3
4
5
6
7
8
9
10
11
k========3
==================output
1 2 3 4 5 6 7 8 9 10 11 
3 2 1 6 5 4 9 8 7 10 11 
 */
public class KReverseLinkedList {

	public static class Node {
		int data;
		Node next;
	}

	public static class LinkedList {
		Node head;
		Node tail;
		int size;

		void addLast(int val) {
			Node temp = new Node();
			temp.data = val;
			temp.next = null;

			if (size == 0) {
				head = tail = temp;
			} else {
				tail.next = temp;
				tail = temp;
			}

			size++;
		}

		public int size() {
			return size;
		}

		public void display() {
			Node temp = head;

			while (temp != null) {
				System.out.print(temp.data + " ");
				temp = temp.next;
			}

			System.out.println();

		}

		public void removeFirst() {
			if (size == 0) {
				System.out.println("List is empty");
			} else if (size == 1) {
				head = tail = null;
				size = 0;
			} else {
				head = head.next;
				size--;
			}
		}

		public int getFirst() {
			if (size == 0) {
				System.out.println("List is empty");
				return -1;
			} else {

				Node temp = head;
				int val = temp.data;
				return val;
			}
		}

		public void addFirst(int val) {

			Node temp = new Node();
			temp.data = val;
			temp.next = head;
			head = temp;
			if (size == 0) {
				tail = temp;
			}
			size++;

		}

		public void kReverse(int k) {
			LinkedList pre = null;
			while (this.size > 0) {
				LinkedList cur = new LinkedList();
				if (this.size > k) {
					for (int i = 0; i < k; i++) {
						int val = this.getFirst();
						this.removeFirst();
						cur.addFirst(val);
					}
				} else {
					int val = this.getFirst();
					this.removeFirst();
					cur.addLast(val);
				}

				if (pre == null) {
					pre = cur;
				} else {
					pre.tail.next = cur.head;
					pre.tail = cur.tail;
					pre.size += cur.size;
				}
			}

			this.head = pre.head;
			this.tail = pre.tail;
			this.size = pre.size;
		}
	}

	public static void main(String[] args) throws Exception {

		Scanner s1 = new Scanner(System.in);
		int n1 = s1.nextInt();
		int[] val1 = new int[n1];
		LinkedList l1 = new LinkedList();
		for (int i = 0; i < n1; i++) {

			l1.addLast(s1.nextInt());
		}
		int k = s1.nextInt();
		l1.display();
		l1.kReverse(k);
		l1.display();

	}
}
