package GenericTree;

import java.util.ArrayList;
import java.util.Scanner;
import java.util.Stack;
/*
 * 
 * 1. You are given a partially written GenericTree class.
2. You are required to complete the body of max function. The function is expected to find the node with maximum value and return it.
3. Input and Output is managed for you.

 * 
 * ============input
 * 
 * 10
20
-1
30
50
-1
60
-1
40
-1
-1

========output
60

 */
public class MaximumInGenericTree {

	private static class Node {
		int data;
		ArrayList<Node> children = new ArrayList<>();
	}

	public static void display(Node node) {
		String str = node.data + " -> ";
		for (Node child : node.children) {
			str += child.data + ", ";
		}
		str += ".";
		System.out.println(str);

		for (Node child : node.children) {
			display(child);
		}
	}

	public static Node construct(int[] arr) {
		Node root = null;

		Stack<Node> st = new Stack<>();
		for (int i = 0; i < arr.length; i++) {
			if (arr[i] == -1) {
				st.pop();
			} else {
				Node t = new Node();
				t.data = arr[i];

				if (st.size() > 0) {
					st.peek().children.add(t);
				} else {
					root = t;
				}

				st.push(t);
			}
		}

		return root;
	}

	public static int size(Node node) {
		int s = 0;
		for (Node child : node.children) {
			int cs = size(child);
			s = s + cs;
		}
		s = s + 1;

		return s;
	}

	public static int max(Node node) {
		int max = Integer.MIN_VALUE;

		for (Node child : node.children) {
			int cm = max(child);
			max = Math.max(max, cm);
		}

		max = Math.max(node.data, max);
		return max;

	}

	public static void main(String[] args) throws Exception {
		Scanner s1 = new Scanner(System.in);
		int n = s1.nextInt();
		int[] arr = new int[n];

		for (int i = 0; i < n; i++) {
			arr[i] = s1.nextInt();
		}

		Node root = construct(arr);
		int m = max(root);
		System.out.println(m);
		// display(root);
	}

}
