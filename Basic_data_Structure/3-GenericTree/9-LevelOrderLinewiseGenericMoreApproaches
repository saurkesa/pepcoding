package GenericTree;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Queue;
import java.util.Stack;

/*===========input
 * 24
10 20 50 -1 60 -1 -1 30 70 -1 80 110 -1 120 -1 -1 90 -1 -1 40 100 -1 -1 -1

==================output
10 
20 30 40 
50 60 70 80 90 100 
110 120 


 */
public class LevelOrderLinewiseGenericMoreApproaches {
	private static class Node {
		public Node() {

		}

		public Node(int data) {
			this.data = data;
		}

		int data;
		ArrayList<Node> children = new ArrayList<>();
	}

	private static class Pair {
		Node node;
		int level;

		public Pair(Node node, int level) {
			this.node = node;
			this.level = level;
		}
	}

	public static void display(Node node) {
		String str = node.data + " -> ";
		for (Node child : node.children) {
			str += child.data + ", ";
		}
		str += ".";
		System.out.println(str);

		for (Node child : node.children) {
			display(child);
		}
	}

	public static Node construct(int[] arr) {
		Node root = null;

		Stack<Node> st = new Stack<>();
		for (int i = 0; i < arr.length; i++) {
			if (arr[i] == -1) {
				st.pop();
			} else {
				Node t = new Node();
				t.data = arr[i];

				if (st.size() > 0) {
					st.peek().children.add(t);
				} else {
					root = t;
				}

				st.push(t);
			}
		}

		return root;
	}

	public static void levelOrderLinewise1(Node node) {
		Queue<Node> mq = new ArrayDeque<>();
		mq.add(node);
		mq.add(new Node(-1));
		while (mq.size() > 0) {
			node = mq.remove();
			if (node.data != -1) {
				System.out.print(node.data + " ");

				for (Node child : node.children) {
					mq.add(child);
				}
			} else {
				if (mq.size() > 0) {
					mq.add(new Node(-1));
					System.out.println();

				}
			}
		}
	}

	public static void levelOrderLinewise2(Node node) {
		Queue<Node> mq = new ArrayDeque<>();
		mq.add(node);
		while (mq.size() > 0) {
			int cicl = mq.size();

			for (int i = 0; i < cicl; i++) {
				node = mq.remove();
				System.out.print(node.data + " ");
				for (Node child : node.children) {
					mq.add(child);
				}
			}

			System.out.println();
		}
	}

	public static void levelOrderLinewise3(Node node) {
		Queue<Pair> mq = new ArrayDeque<>();
		mq.add(new Pair(node, 1));
		int level = 1;
		while (mq.size() > 0) {
			Pair p = mq.remove();
			if (p.level > level) {
				level = p.level;
				System.out.println();
			}
			System.out.print(p.node.data +" ");
			for (Node child : p.node.children) {
				Pair cp = new Pair(child, level + 1);
				mq.add(cp);
			}
		}
	}

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int n = Integer.parseInt(br.readLine());
		int[] arr = new int[n];
		String[] values = br.readLine().split(" ");
		for (int i = 0; i < n; i++) {
			arr[i] = Integer.parseInt(values[i]);
		}

		Node root = construct(arr);
		levelOrderLinewise3(root);

		// display(root);
	}

}
