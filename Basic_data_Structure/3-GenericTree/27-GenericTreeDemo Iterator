package GenericTree;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Stack;

import GenericTree.IterativePrePostOrder.Pair;
/*
 * 
 * ===========input
 * 24
10 20 -50 -1 60 -1 -1 30 70 -1 -80 110 -1 -120 -1 -1 90 -1 -1 40 -100 -1 -1 -1

==========================output
10 20 -50 60 30 70 -80 110 -120 90 40 -100 
10 20 -50 60 30 70 -80 110 -120 90 40 -100 
 */
public class GenericTreeDemo {
	public static class GenericTree implements Iterable<Integer> {
		Node root;

		GenericTree(Node root) {
			this.root = root;
		}

		public Iterator<Integer> iterator() {
			Iterator<Integer> obj = new GTPreorderIterator(root);
			return obj;
		}

		public static class GTPreorderIterator implements Iterator<Integer> {
			Integer nval;
			Stack<Pair> st;

			public GTPreorderIterator(Node root) {
				st = new Stack<>();
				st.push(new Pair(root, -1));
				next();// since default value of nval is null
			}

			public boolean hasNext() {
				if (nval == null) {
					return false;
				} else {
					return true;
				}
			}

			public Integer next() {

				Integer fr = nval;
				nval = null;
				while (st.size() > 0) {
					Pair top = st.peek();
					if (top.state == -1) {
						nval = top.node.data;
						top.state++;
						break;
					} else if (top.state == top.node.children.size()) {
						st.pop();
					} else {
						Pair cp = new Pair(top.node.children.get(top.state), -1);
						st.push(cp);
						top.state++;
					}
				}
				return fr;
			}

		}

		private static class Pair {
			Node node;
			int state;

			Pair(Node node, int state) {
				this.node = node;
				this.state = state;
			}
		}
	}

	private static class Node {
		int data;
		ArrayList<Node> children = new ArrayList<>();
	}

	public static void display(Node node) {
		String str = node.data + " -> ";
		for (Node child : node.children) {
			str += child.data + ", ";
		}
		str += ".";
		System.out.println(str);

		for (Node child : node.children) {
			display(child);
		}
	}

	public static Node construct(int[] arr) {
		Node root = null;

		Stack<Node> st = new Stack<>();
		for (int i = 0; i < arr.length; i++) {
			if (arr[i] == -1) {
				st.pop();
			} else {
				Node t = new Node();
				t.data = arr[i];

				if (st.size() > 0) {
					st.peek().children.add(t);
				} else {
					root = t;
				}

				st.push(t);
			}
		}

		return root;
	}

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		int n1 = Integer.parseInt(br.readLine());
		int[] arr1 = new int[n1];
		String[] values1 = br.readLine().split(" ");
		for (int i = 0; i < n1; i++) {
			arr1[i] = Integer.parseInt(values1[i]);
		}
		Node root = construct(arr1);
		GenericTree gt = new GenericTree(root);

		for (int val : gt) {
			System.out.print(val + " ");
		}
		System.out.println();
		Iterator<Integer> gti = gt.iterator();
		while (gti.hasNext()) {
			System.out.print(gti.next() + " ");
		}

	}

}
