package Stack_and_queue;

import java.util.Scanner;
import java.util.Stack;
/*
 *  find index 
 * 1. You are given a number n, representing the size of array a.
2. You are given n numbers, representing the elements of array a.
3. You are given a number k, representing the size of window.
4. You are required to find and print the maximum element in every window of size k.

e.g.
for the array [2 9 3 8 1 7 12 6 14 4 32 0 7 19 8 12 6] and k = 4, the answer is [9 9 8 12 12 14 14 32 32 32 32 19 19 19]
input
 6
2
3
4
5
6
1
k = 4
output
5
6
6

 */
public class SlidingWindowMaximum {

	private static int[] nge(int[] arr) {

		int[] nge = new int[arr.length];

		Stack<Integer> st = new Stack<Integer>();

		nge[arr.length - 1] = arr.length;
		st.push(arr.length - 1);

		for (int i = arr.length - 2; i >= 0; i--) {
			while (st.size() > 0 && arr[i] >= arr[st.peek()]) {
				st.pop();
			}
			if (st.size() == 0) {
				nge[i] = arr.length;
			} else {
				nge[i] = st.peek();
			}
			st.push(i);
		}

		return nge;

	}

		public static void main(String[] args) {

		Scanner s1 = new Scanner(System.in);
		int n = s1.nextInt();
		int[] arr = new int[n];
		for (int i = 0; i < arr.length; i++) {
			arr[i] = s1.nextInt();
		}

		int k = s1.nextInt();
		int[] nge = nge(arr);
	
		int j = 0;
		for (int i = 0; i <= arr.length - k; i++) {
			if (j < i) {
				j = i;
			}
			while (nge[j] < i + k) {
				j = nge[j];
			}

			System.out.println(arr[j]);

		}

	}

}
