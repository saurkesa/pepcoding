package Stack_and_queue;

import java.util.Scanner;
import java.util.Stack;
/*
 * 
 * 
 *
 2. You are required to evaluate it and print it's value.
3. You are required to convert it to infix and print it.
4. You are required to convert it to prefix and print it.

Note -> Use brackets in infix expression for indicating precedence. Check sample input output for more details.
 * input
 * 264*8/+3-
 * output
2
((2+((6*4)/8))-3)
-+2/*6483

 */
public class PostfixEvaluationAndConversion {
	private static int operation(int v1, int v2, char ch) {

		if (ch == '+') {
			return v1 + v2;
		} else if (ch == '-') {
			return v1 - v2;
		} else if (ch == '*') {
			return v1 * v2;
		} else {
			return v1 / v2;
		}

	}

	public static void main(String[] args) {

		Scanner s1 = new Scanner(System.in);
		String exp = s1.nextLine();
		Stack<Integer> vs = new Stack<>();
		Stack<String> is = new Stack<>();
		Stack<String> ps = new Stack<>();

		for (int i = 0; i < exp.length(); i++) {
			char ch = exp.charAt(i);

			if (ch == '+' || ch == '-' || ch == '*' || ch == '/') {

				int v2 = vs.pop();
				int v1 = vs.pop();
				int val = operation(v1, v2, ch);
				vs.push(val);

				String iv2 = is.pop();
				String iv1 = is.pop();

				String ival = "(" + iv1 + ch + iv2 + ")";
				is.push(ival);

				String pv2 = ps.pop();
				String pv1 = ps.pop();

				String pval = ch + pv1 + pv2;
				ps.push(pval);

			} else {
				vs.push(ch - '0');
				is.push(ch + "");
				ps.push(ch + "");
			}
		}

		System.out.println(vs.pop());
		System.out.println(is.pop());
		System.out.println(ps.pop());

	}

}
