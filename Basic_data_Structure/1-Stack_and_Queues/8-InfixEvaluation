package Stack_and_queue;

import java.util.Scanner;
import java.util.Stack;
/*
 * 
 * 1. Expression is balanced
2. The only operators used are +, -, *, /
3. Opening and closing brackets - () - are used to impact precedence of operations
4. + and - have equal precedence which is less than * and /. * and / also have equal precedence.
5. In two operators of equal precedence give preference to the one on left.
6. All operands are single digit numbers.

 * input
 * 2 + 6 * 4 / 8 - 3
output 2

 */
public class InfixEvaluation {

	public static int precedence(char optor) {
		if (optor == '+') {
			return 1;
		} else if (optor == '-') {
			return 1;
		} else if (optor == '*') {
			return 2;
		} else {
			return 2;
		}
	}

	public static int operation(int v1, int v2, char optor) {
		if (optor == '+') {
			return v1 + v2;
		} else if (optor == '-') {
			return v1 - v2;
		} else if (optor == '*') {
			return v1 * v2;
		} else {
			return v1 / v2;
		}
	}

	public static void main(String[] args) {

		Scanner s1 = new Scanner(System.in);
		String exp = s1.nextLine();

		Stack<Integer> operand = new Stack<>();
		Stack<Character> operator = new Stack<>();

		for (int i = 0; i < exp.length(); i++) {
			char ch = exp.charAt(i);
			if (ch == '(') {
				operator.push(ch);
			}

			else if (Character.isDigit(ch)) {
				operand.push(ch - '0'); // char to integer
			} else if (ch == ')') {
				while (operator.peek() != '(') {
					char opera = operator.pop();
					int v2 = operand.pop();
					int v1 = operand.pop();

					int operat = operation(v1, v2, opera);
					operand.push(operat);
				}
				 operator.pop();
			} else if (ch == '+' || ch == '-' || ch == '*' || ch == '/') {
				while (operator.size() > 0 && operator.peek() != '(' && precedence(ch) <= precedence(operator.peek())) {

					char opera = operator.pop();
					int v2 = operand.pop();
					int v1 = operand.pop();
					int operat = operation(v1, v2, opera);
					operand.push(operat);

				}
				operator.push(ch);
			}

		}
		while (operator.size() != 0) {
			char opera = operator.pop();
			int v2 = operand.pop();
			int v1 = operand.pop();

			int operat = operation(v1, v2, opera);
			operand.push(operat);
		}
		System.out.println(operand.peek());
	}
}
