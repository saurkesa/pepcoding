package Stack_and_queue;

import java.util.Scanner;
import java.util.Stack;
/*
 * input
 * a*(b-c+d)/e
 * output
abc-d+*e/
/*a+-bcde

 */
public class InfixConversion {
	public static int precedence(char optor) {
		if (optor == '+') {
			return 1;
		} else if (optor == '-') {
			return 1;
		} else if (optor == '*') {
			return 2;
		} else {
			return 2;
		}
	}

	public static void main(String[] args) {
		Scanner s1 = new Scanner(System.in);
		String exp = s1.nextLine();

		Stack<String> postfix = new Stack<>();
		Stack<String> prefix = new Stack<>();
		Stack<Character> operators = new Stack<>();

		for (int i = 0; i < exp.length(); i++) {
			char ch = exp.charAt(i);

			if (ch == '(') {
				operators.push(ch);
			} else if ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z')) {
				postfix.push(ch + "");
				prefix.push(ch + "");
			} else if (ch == ')') {
				while (operators.peek() != '(') {
					char op = operators.pop();

					String postval2 = postfix.pop();
					String postval1 = postfix.pop();
					postfix.push(postval1 + postval2 + op);

					String preval2 = prefix.pop();
					String preval1 = prefix.pop();
					prefix.push(op + preval1 + preval2);
				}

				operators.pop();

			} else if (ch == '+' || ch == '-' || ch == '*' || ch == '/') {
				while (operators.size() > 0 && operators.peek() != '('
						&& precedence(ch) <= precedence(operators.peek())) {
					char op = operators.pop();

					String postval2 = postfix.pop();
					String postval1 = postfix.pop();
					postfix.push(postval1 + postval2 + op);

					String preval2 = prefix.pop();
					String preval1 = prefix.pop();
					prefix.push(op + preval1 + preval2);
				}

				operators.push(ch);
			}
		}

		while (operators.size() > 0) {
			char op = operators.pop();

			String postval2 = postfix.pop();
			String postval1 = postfix.pop();
			postfix.push(postval1 + postval2 + op);

			String preval2 = prefix.pop();
			String preval1 = prefix.pop();
			prefix.push(op + preval1 + preval2);
		}

		System.out.println(postfix.peek());
		System.out.println(prefix.peek());
	}
}
