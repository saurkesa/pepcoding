package Stack_and_queue;

import java.util.Scanner;
import java.util.Stack;

public class BalancedBracket {

	public static void main(String[] args) {

		Scanner s1 = new Scanner(System.in);
		String str = s1.nextLine();
		Stack<Character> st = new Stack<>();
		for (int i = 0; i < str.length(); i++) {
			char ch = str.charAt(i);
			if (ch == '(' || ch == '{' || ch == '[') {
				st.push(ch);

			} else if (ch == ')') {

				boolean val = handleClosing(st, '(');
				if (val == false) {
					System.out.println(val);
					return;
				}
			} else if (ch == '}') {
				boolean val = handleClosing(st, '{');
				if (val == false) {
					System.out.println(val);
					return;
				}
			} else if (ch == ']') {

				boolean val = handleClosing(st, '[');
				if (val == false) {
					System.out.println(val);
					return;
				}
			}
		}
		
		if(st.size()==0)
		{
			System.out.println(true);
		}
		else
		{
			System.out.println(false);
		}

	}

	private static boolean handleClosing(Stack<Character> st, char corresoc) {
		{
			if (st.size() == 0) {
				return false;
			} else if (st.peek() != corresoc) {

				return false;
			} else {
				st.pop();
				return true;
			}
		}

	}

}
