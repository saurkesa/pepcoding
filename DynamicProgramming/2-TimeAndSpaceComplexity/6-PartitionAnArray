package TimeAndSpaceComplexity;

import java.util.Scanner;

/*
 1. You are given an array(arr) of integers and a pivot.
2. You have to re-arrange the given array in such a way that all elements smaller or equal to pivot lie on the left side of pivot and all elements greater than pivot lie on its right side.
3. You have to achieve this in linear time.

input 
no of element 5
7
-2
4
1
3
pivot element 3

output 
-2 1 3 7 4 

 */
public class PartitionAnArray {

	private static void partition(int[] arr, int pivot) {
		// 0 to j-1 <=pivot
		// j to i-1 > pivot
// i to end = unknown

		int i = 0;
		int j = 0;

		while (i < arr.length) {
			if (arr[i] > pivot) {
				i++;
			} else {
				swap(arr, i, j);
				i++;
				j++;
			}
		}

	}

	public static void swap(int[] arr, int i, int j) {

		int temp = arr[i];
		arr[i] = arr[j];
		arr[j] = temp;
	}

	public static void print(int[] arr) {
		for (int i = 0; i < arr.length; i++) {
			System.out.print(arr[i] + " ");
		}
		System.out.println();
	}

	public static void main(String[] args) {

		Scanner s1 = new Scanner(System.in);
		int n = s1.nextInt();
		int[] arr = new int[n];
		for (int i = 0; i < arr.length; i++) {
			arr[i] = s1.nextInt();
		}

		int pivot = s1.nextInt();
		partition(arr, pivot);
		print(arr);

	}

}
