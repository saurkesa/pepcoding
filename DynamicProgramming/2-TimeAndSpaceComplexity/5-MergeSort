package TimeAndSpaceComplexity;

import java.util.Scanner;
/*
 * 1. You are given an array(arr) of integers.
2. You have to sort the given array in increasing order using the merge sort.
 * input
no of element  6
1
7
2
-2
0
3
output 
-2
0
1
2
3
7

 */
public class MergeSort {

	private static int[] mergeSort(int[] arr, int low, int high) {

		if (low == high) {
			int[] ba = new int[1];
			ba[0] = arr[low];
			return ba;
		}
		int mid = (low + high) / 2;

		int[] fsh = mergeSort(arr, low, mid); // first sorted half
		int[] ssh = mergeSort(arr, mid + 1, high); // second sorted half

		int[] fsa = mergeTwoSortedArray(fsh, ssh);// full sorted array
		return fsa;

	}

	private static int[] mergeTwoSortedArray(int[] one, int[] two) {

		int[] res = new int[one.length + two.length];

		int i = 0;
		int j = 0;
		int k = 0;
		while (i < one.length && j < two.length) {
			if (one[i] < two[j]) {
				res[k] = one[i];
				i++;
				k++;
			} else {
				res[k] = two[j];
				j++;
				k++;
			}
		}

		while (i < one.length) {
			res[k] = one[i];
			i++;
			k++;
		}

		while (j < two.length) {
			res[k] = two[j];
			j++;
			k++;
		}

		return res;

	}

	private static void print(int[] mergeSort) {
		for (int i = 0; i < mergeSort.length; i++) {
			System.out.println(mergeSort[i]);
		}

	}

	public static void main(String[] args) {

		Scanner s1 = new Scanner(System.in);
		int n = s1.nextInt();
		int[] arr = new int[n];
		for (int i = 0; i < arr.length; i++) {
			arr[i] = s1.nextInt();
		}

		int[] sortedArray = mergeSort(arr, 0, arr.length - 1);
		print(sortedArray);

	}

}
