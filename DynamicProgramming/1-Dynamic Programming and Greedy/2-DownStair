package DynamicProgrammingAndGreedy;

import java.util.Scanner;

/*
 * input  n stair--3
 * output (total no of ways to rach from n to 0 ----4)
 */
public class DownStair {

	//tabulation
//	private static int countPathTabulation(int n) {
//		int[] dp = new int[n + 1];
//		dp[0] = 1;
//		for (int i = 1; i <= n; i++) {
//			if (i == 1) {
//				dp[i] = dp[i - 1];
//			} else if (i == 2) {
//				dp[i] = dp[i - 1] + dp[i - 2];
//			} else {
//				dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3];
//			}
//		}
//		return dp[n];
//	}

	//memomiztion
	private static int countPath(int n, int[] qb) {

		if (n == 0) {
			return 1;
		} else if (n < 0) {
			return 0;
		}
		if (qb[n] != 0) {
			return qb[n];
		}
		int p1 = countPath(n - 1, qb);
		int p2 = countPath(n - 2, qb);
		int p3 = countPath(n - 3, qb);
		int cp = p1 + p2 + p3;
		qb[n] = cp;
		return cp;
	}

	public static void main(String[] args) {

		Scanner s1 = new Scanner(System.in);
		int n = s1.nextInt();
		int cp = countPath(n, new int[n + 1]);
		System.out.println(cp);
//		int countPathTabulation = countPathTabulation(n);
//		System.out.println(countPathTabulation);
	}

}
