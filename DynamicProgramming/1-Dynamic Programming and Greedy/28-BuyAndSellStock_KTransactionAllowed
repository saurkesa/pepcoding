package DynamicProgrammingAndGreedy;

import java.util.Scanner;
/*
 * 
 * 1. You are given a number n, representing the number of days.
2. You are given n numbers, where ith number represents price of stock on ith day.
3. You are given a number k, representing the number of transactions allowed.
3. You are required to print the maximum profit you can make if you are allowed k transactions at-most.
Note - There can be no overlapping transaction. One transaction needs to be closed (a buy followed by a sell) before opening another transaction (another buy).
 * input 
 * prices 6
9
6
7
6
3
8
 no of transaction 3
output 6


 */
public class BuyAndSellStock_KTransactionAllowed {

	public static void main(String[] args) {

		Scanner s1 = new Scanner(System.in);
		int n = s1.nextInt();
		int[] arr = new int[n];
		for (int i = 0; i < arr.length; i++) {
			arr[i] = s1.nextInt();
		}

		int k = s1.nextInt();// no of transaction

		int[][] dp = new int[k + 1][n];

		for (int t = 1; t <= k; t++) {
			int max = Integer.MIN_VALUE;
			for (int d = 1; d < arr.length; d++) {

				if (dp[t - 1][d - 1] - arr[d - 1] > max) {
					max = dp[t - 1][d - 1] - arr[d - 1];
				}

				if (max + arr[d] > dp[t][d - 1]) {
					dp[t][d] = max + arr[d];
				} else {
					dp[t][d] = dp[t][d - 1];
				}
			}
		}

		System.out.println(dp[k][n - 1]);
	}

}
