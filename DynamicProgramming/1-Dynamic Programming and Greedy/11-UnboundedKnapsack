package DynamicProgrammingAndGreedy;

import java.util.Scanner;
/*
 * 
 * 1. You are given a number n, representing the count of items.
2. You are given n numbers, representing the values of n items.
3. You are given n numbers, representing the weights of n items.
3. You are given a number "cap", which is the capacity of a bag you've.
4. You are required to calculate and print the maximum value that can be created in the bag without 
    overflowing it's capacity.
Note -> Each item can be taken any number of times. You are allowed to put the same item again 
                  and again.
                  
 * input 
 * 5
 * value
15
14
10
45
30
weight
2
5
1
3
4
bag capacity 7
output 100

 */
public class UnboundedKnapsack {

	public static void main(String[] args) {

		Scanner s1 = new Scanner(System.in);
		int n = s1.nextInt();

		int[] vals = new int[n];

		for (int i = 0; i < vals.length; i++) {
			vals[i] = s1.nextInt();
		}

		int[] wts = new int[n];

		for (int j = 0; j < wts.length; j++) {
			wts[j] = s1.nextInt();
		}

		int cap=s1.nextInt();
		
		int[] dp = new int[cap+1];
		
		dp[0]=0;
		
		for(int bagc=1;bagc<=cap;bagc++)
		{
			int max=0;
			for(int i=0;i<n;i++) // item
			{
				if(wts[i]<=bagc)
				{
					int rbagc =bagc-wts[i];
					int rbagv =dp[rbagc];
					int tbagv=rbagv+vals[i];
					
					if(tbagv>max)
					{
						max=tbagv;
					}
				}
				
			}
			dp[bagc]=max;
		}
		
		System.out.println(dp[cap]);
	}

}
