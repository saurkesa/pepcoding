package DynamicProgrammingAndGreedy;

import java.util.Scanner;
/*
 * 
 * 1. You are given a number n, representing the count of coins.
2. You are given n numbers, representing the denominations of n coins.
3. You are given a number "amt".
4. You are required to calculate and print the number of combinations of the n coins using which the 
     amount "amt" can be paid.

Note1 -> You have an infinite supply of each coin denomination i.e. same coin denomination can be 
                  used for many installments in payment of "amt"
Note2 -> You are required to find the count of combinations and not permutations i.e.
                  2 + 2 + 3 = 7 and 2 + 3 + 2 = 7 and 3 + 2 + 2 = 7 are different permutations of same 
                  combination. You should treat them as 1 and not 3.
                  
 input 
 total element 3
2
3
5
output 7 (combination 223 25)

 */
public class CoinChangeCombination {

	public static void main(String[] args) {
	
		Scanner s1 = new Scanner(System.in);
		int n=s1.nextInt();
		int[] arr =new int[n];
		for(int i=0;i<arr.length;i++)
		{
			arr[i]=s1.nextInt();
		}
		int tar=s1.nextInt();
		
		int[] dp = new int[tar+1];
		
		dp[0]=1;
		for(int i=0;i<arr.length;i++)
		{
			for(int j=arr[i];j<dp.length;j++)
			{
				dp[j]+=dp[j-arr[i]];
			}
		}

		System.out.println(dp[tar]);
	}

}
