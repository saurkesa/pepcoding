package DynamicProgrammingAndGreedy;

import java.util.Scanner;
/*
 * 
 * 1. You are given a number n, representing the count of items.
2. You are given n numbers, representing the values of n items.
3. You are given n numbers, representing the weights of n items.
3. You are given a number "cap", which is the capacity of a bag you've.
4. You are required to calculate and print the maximum value that can be created in the bag without 
     overflowing it's capacity.

Note -> Each item can be taken 0 or 1 number of times. You are not allowed to put the same item 
               again and again.
               
 * input
 * 5
value(run)
15
14
10
45
30
weight(ball)
2
5
1
3
4
capacity 7
output 75

 */
public class ZeroOneKnapsack {

	public static void main(String[] args) {

		Scanner s1 = new Scanner(System.in);
		int n = s1.nextInt();
		int[] weight = new int[n];
		int[] value = new int[n];
		for (int i = 0; i < n; i++) {
			value[i] = s1.nextInt();
		}
		for (int j = 0; j < n; j++) {
			weight[j] = s1.nextInt();
		}
		int capacity = s1.nextInt();

		int[][] dp = new int[n + 1][capacity + 1];

		for (int i = 1; i < dp.length; i++) {
			for (int j = 1; j < dp[0].length; j++) {
				if (j >= weight[i - 1]) {
					int rCap= j - weight[i - 1];

					if (dp[i - 1][rCap] + value[i - 1] > dp[i - 1][j]) {
						dp[i][j] = dp[i - 1][rCap] + value[i - 1];
					} else {
						dp[i][j] = dp[i - 1][j];
					}
				} else {
					dp[i][j] = dp[i - 1][j];
				}
			}
		}

		System.out.println(dp[n][capacity]);

	}

}
